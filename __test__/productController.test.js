const Product = require('../models/product');
const Category = require('../models/category')
const productController = require('../controllers/productController');

describe('getProductsOfOutlet', () => {

    // Test that the 'getProductsOfOutlet' function returns a JSON response with status code 200 and an array of products when given a valid outlet id
    it('should return a JSON response with status code 200 and an array of products when given a valid outlet id', async () => {
        // Mock the request object
        const req = {
            query: {
                outletid: '646a5a0a51c3c24655b854e9'
            }
        };

        // Mock the response object
        const res = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn()
        };

        // Mock the Product.find() method
        const mockFind = jest.spyOn(Product, 'find');
        mockFind.mockImplementation(() => ({
            populate: jest.fn().mockReturnThis(),
            exec: jest.fn().mockResolvedValueOnce([
                {
                    _id: '649bf336db6a5824369b7cdc',
                    category: '649bedcaeb0a2f9c06dc3199',
                    productName: 'Chocolate Krusher',
                    description: 'Chocolate krusher',
                    price: 10,
                    veg: true,
                    productImage: {
                        url: "http://res.cloudinary.com/dokgv4lff/image/upload/v1690099952/ljk4zhlnaonx7cvnqttx.jpg",
                        imageid: "ljk4zhlnaonx7cvnqttx"
                    },
                    variants: [
                        {
                            variantName: "Medium",
                            price: 60
                        }
                    ],
                    inStock: true
                },
                {
                    _id: '649bf336db6a5824369b7cdc',
                    category: '649bedcaeb0a2f9c06dc3199',
                    productName: 'Chocolate Krusher',
                    description: 'Chocolate krusher',
                    price: 10,
                    veg: true,
                    productImage: {
                        url: "http://res.cloudinary.com/dokgv4lff/image/upload/v1690099952/ljk4zhlnaonx7cvnqttx.jpg",
                        imageid: "ljk4zhlnaonx7cvnqttx"
                    },
                    variants: [
                        {
                            variantName: "Medium",
                            price: 60
                        }
                    ],
                    inStock: true
                }
            ])
        }));

        // Call the function
        await productController.getProductsOfOutlet(req, res);

        // Check the response
        expect(res.status).toHaveBeenCalledWith(200);
        expect(res.json).toHaveBeenCalledWith({
            count: 2,
            products: [
                {
                    _id: '649bf336db6a5824369b7cdc',
                    category: '649bedcaeb0a2f9c06dc3199',
                    productName: 'Chocolate Krusher',
                    description: 'Chocolate krusher',
                    price: 10,
                    veg: true,
                    productImage: {
                        url: "http://res.cloudinary.com/dokgv4lff/image/upload/v1690099952/ljk4zhlnaonx7cvnqttx.jpg",
                        imageid: "ljk4zhlnaonx7cvnqttx"
                    },
                    variants: [
                        {
                            variantName: "Medium",
                            price: 60
                        }
                    ],
                    inStock: true
                },
                {
                    _id: '649bf336db6a5824369b7cdc',
                    category: '649bedcaeb0a2f9c06dc3199',
                    productName: 'Chocolate Krusher',
                    description: 'Chocolate krusher',
                    price: 10,
                    veg: true,
                    productImage: {
                        url: "http://res.cloudinary.com/dokgv4lff/image/upload/v1690099952/ljk4zhlnaonx7cvnqttx.jpg",
                        imageid: "ljk4zhlnaonx7cvnqttx"
                    },
                    variants: [
                        {
                            variantName: "Medium",
                            price: 60
                        }
                    ],
                    inStock: true
                }
            ]
        });

        // Restore the mock
        mockFind.mockRestore();
    });

    // Generated by CodiumAI

    describe('getProductsByCategory', () => {

        // Tests that the function returns categoryArray with all categories and their products when categoryName is 'All'
        it('should return categoryArray with all categories and their products when categoryName is "All"', async () => {
            // Mock the request object
            const req = {
                query: {
                    categoryName: 'All',
                    outletid: '12345'
                }
            };

            // Mock the response object
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn()
            };

            // Mock the Category.find() method
            Category.find = jest.fn().mockReturnValueOnce({
                populate: jest.fn().mockReturnThis(),
                exec: jest.fn().mockResolvedValueOnce([
                    {
                        name: 'Category 1',
                        _id: '123',
                        icon: {
                            _id: '456',
                            icon: {
                                url: 'icon1.jpg'
                            }
                        },
                        products: [
                            {
                                name: 'Product 1',
                                _id: '789',
                                category: '123',
                                icon: {
                                    _id: '101112',
                                    icon: {
                                        url: 'icon2.jpg'
                                    }
                                }
                            },
                            {
                                name: 'Product 2',
                                _id: '131415',
                                category: '123',
                                icon: {
                                    _id: '161718',
                                    icon: {
                                        url: 'icon3.jpg'
                                    }
                                }
                            }
                        ]
                    },
                    {
                        name: 'Category 2',
                        _id: '1920',
                        icon: {
                            _id: '2122',
                            icon: {
                                url: 'icon4.jpg'
                            }
                        },
                        products: [
                            {
                                name: 'Product 3',
                                _id: '232425',
                                category: '1920',
                                icon: {
                                    _id: '262728',
                                    icon: {
                                        url: 'icon5.jpg'
                                    }
                                }
                            }
                        ]
                    }
                ])
            });

            // Call the function
            await productController.getProductsByCategory(req, res);

            // Check the response
            expect(res.status).toHaveBeenCalledWith(200);
            expect(res.json).toHaveBeenCalledWith({
                categoryArray: [
                    {
                        category: 'Category 1',
                        categoryid: '123',
                        iconid: '456',
                        iconurl: 'icon1.jpg',
                        products: [
                            {
                                name: 'Product 1',
                                _id: '789',
                                category: '123',
                                icon: {
                                    _id: '101112',
                                    icon: {
                                        url: 'icon2.jpg'
                                    }
                                }
                            },
                            {
                                name: 'Product 2',
                                _id: '131415',
                                category: '123',
                                icon: {
                                    _id: '161718',
                                    icon: {
                                        url: 'icon3.jpg'
                                    }
                                }
                            }
                        ]
                    },
                    {
                        category: 'Category 2',
                        categoryid: '1920',
                        iconid: '2122',
                        iconurl: 'icon4.jpg',
                        products: [
                            {
                                name: 'Product 3',
                                _id: '232425',
                                category: '1920',
                                icon: {
                                    _id: '262728',
                                    icon: {
                                        url: 'icon5.jpg'
                                    }
                                }
                            }
                        ]
                    }
                ]
            });
        });

        // Tests that the function returns categoryArray with products of the specified category when categoryName is not 'All'
        it('should return categoryArray with products of the specified category when categoryName is not "All"', async () => {
            // Mock the request object
            const req = {
                query: {
                    categoryName: 'Category 1',
                    outletid: '12345'
                }
            };

            // Mock the response object
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn()
            };

            // Mock the Category.find() method
            Category.find = jest.fn().mockReturnValueOnce({
                populate: jest.fn().mockReturnThis(),
                exec: jest.fn().mockResolvedValueOnce([
                    {
                        name: 'Category 1',
                        _id: '123',
                        icon: {
                            _id: '456',
                            icon: {
                                url: 'icon1.jpg'
                            }
                        },
                        products: [
                            {
                                name: 'Product 1',
                                _id: '789',
                                category: '123',
                                icon: {
                                    _id: '101112',
                                    icon: {
                                        url: 'icon2.jpg'
                                    }
                                }
                            },
                            {
                                name: 'Product 2',
                                _id: '131415',
                                category: '123',
                                icon: {
                                    _id: '161718',
                                    icon: {
                                        url: 'icon3.jpg'
                                    }
                                }
                            }
                        ]
                    }
                ])
            });

            // Call the function
            await productController.getProductsByCategory(req, res);

            // Check the response
            expect(res.status).toHaveBeenCalledWith(200);
            expect(res.json).toHaveBeenCalledWith({
                categoryArray: [
                    {
                        category: 'Category 1',
                        categoryid: '123',
                        iconid: '456',
                        iconurl: 'icon1.jpg',
                        products: [
                            {
                                name: 'Product 1',
                                _id: '789',
                                category: '123',
                                icon: {
                                    _id: '101112',
                                    icon: {
                                        url: 'icon2.jpg'
                                    }
                                }
                            },
                            {
                                name: 'Product 2',
                                _id: '131415',
                                category: '123',
                                icon: {
                                    _id: '161718',
                                    icon: {
                                        url: 'icon3.jpg'
                                    }
                                }
                            }
                        ]
                    }
                ]
            });
        });

        // Tests that the function populates the icon and products fields of the category document
        it('should populate the icon and products fields of the category document', async () => {
            // Mock the request object
            const req = {
                query: {
                    categoryName: 'All',
                    outletid: '12345'
                }
            };

            // Mock the response object
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn()
            };

            // Mock the Category.find() method
            Category.find = jest.fn().mockReturnValueOnce({
                populate: jest.fn().mockReturnThis(),
                exec: jest.fn().mockResolvedValueOnce([
                    {
                        name: 'Category 1',
                        _id: '123',
                        icon: {
                            _id: '456',
                            icon: {
                                url: 'icon1.jpg'
                            }
                        },
                        products: [
                            {
                                name: 'Product 1',
                                _id: '789',
                                category: '123',
                                icon: {
                                    _id: '101112',
                                    icon: {
                                        url: 'icon2.jpg'
                                    }
                                }
                            },
                            {
                                name: 'Product 2',
                                _id: '131415',
                                category: '123',
                                icon: {
                                    _id: '161718',
                                    icon: {
                                        url: 'icon3.jpg'
                                    }
                                }
                            }
                        ]
                    }
                ])
            });

            // Call the function
            await productController.getProductsByCategory(req, res);

            // Check the Category.find() method
            expect(Category.find).toHaveBeenCalledWith({ outlet: '12345' });
            expect(Category.find().populate).toHaveBeenCalledWith('icon');
            expect(Category.find().populate().exec).toHaveBeenCalled();

            // Check the response
            expect(res.status).toHaveBeenCalledWith(200);
            expect(res.json).toHaveBeenCalledWith({
                categoryArray: [
                    {
                        category: 'Category 1',
                        categoryid: '123',
                        iconid: '456',
                        iconurl: 'icon1.jpg',
                        products: [
                            {
                                name: 'Product 1',
                                _id: '789',
                                category: '123',
                                icon: {
                                    _id: '101112',
                                    icon: {
                                        url: 'icon2.jpg'
                                    }
                                }
                            },
                            {
                                name: 'Product 2',
                                _id: '131415',
                                category: '123',
                                icon: {
                                    _id: '161718',
                                    icon: {
                                        url: 'icon3.jpg'
                                    }
                                }
                            }
                        ]
                    }
                ]
            });
        });

        // Tests that the function populates the icon field of the category's product document
        it('should populate the icon field of the category\'s product document', async () => {
            // Mock the request object
            const req = {
                query: {
                    categoryName: 'All',
                    outletid: '12345'
                }
            };

            // Mock the response object
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn()
            };

            // Mock the Category.find() method
            Category.find = jest.fn().mockReturnValueOnce({
                populate: jest.fn().mockReturnThis(),
                exec: jest.fn().mockResolvedValueOnce([
                    {
                        name: 'Category 1',
                        _id: '123',
                        icon: {
                            _id: '456',
                            icon: {
                                url: 'icon1.jpg'
                            }
                        },
                        products: [
                            {
                                name: 'Product 1',
                                _id: '789',
                                category: '123',
                                icon: {
                                    _id: '101112',
                                    icon: {
                                        url: 'icon2.jpg'
                                    }
                                }
                            },
                            {
                                name: 'Product 2',
                                _id: '131415',
                                category: '123',
                                icon: {
                                    _id: '161718',
                                    icon: {
                                        url: 'icon3.jpg'
                                    }
                                }
                            }
                        ]
                    }
                ])
            });

            // Call the function
            await productController.getProductsByCategory(req, res);

            // Check the response
            expect(res.status).toHaveBeenCalledWith(200);
            expect(res.json).toHaveBeenCalledWith({
                categoryArray: [
                    {
                        category: 'Category 1',
                        categoryid: '123',
                        iconid: '456',
                        iconurl: 'icon1.jpg',
                        products: [
                            {
                                name: 'Product 1',
                                _id: '789',
                                category: '123',
                                icon: {
                                    _id: '101112',
                                    icon: {
                                        url: 'icon2.jpg'
                                    }
                                }
                            },
                            {
                                name: 'Product 2',
                                _id: '131415',
                                category: '123',
                                icon: {
                                    _id: '161718',
                                    icon: {
                                        url: 'icon3.jpg'
                                    }
                                }
                            }
                        ]
                    }
                ]
            });
        });

        // Tests that the function returns status code 404 and error message when no categories are found for the specified categoryName
        it('should return status code 404 and error message when no categories are found for the specified categoryName', async () => {
            // Mock the request object
            const req = {
                query: {
                    categoryName: 'Nonexistent Category',
                    outletid: '12345'
                }
            };

            // Mock the response object
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn()
            };

            // Mock the Category.find() method
            Category.find = jest.fn().mockReturnValueOnce({
                populate: jest.fn().mockReturnThis(),
                exec: jest.fn().mockResolvedValueOnce([])
            });

            // Call the function
            await productController.getProductsByCategory(req, res);

            // Check the response
            expect(res.status).toHaveBeenCalledWith(404);
            expect(res.json).toHaveBeenCalledWith({
                error: 'No categories found'
            });
        });
    });


});
